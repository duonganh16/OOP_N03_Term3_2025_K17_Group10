package com.example.servingwebcontent.database;

import java.sql.*;

public class DatabaseInitializer {
    
    // H∆Ø·ªöNG D·∫™N CHO NG∆Ø·ªúI D√ôNG TI·∫æP THEO:
    // Thay th·∫ø CONNECTION_URL b√™n d∆∞·ªõi b·∫±ng connection string MySQL c·ªßa b·∫°n
    // V√ç D·ª§: "jdbc:mysql://YOUR_HOST:YOUR_PORT/YOUR_DATABASE?ssl-mode=REQUIRED"

    // Connection string s·ª≠ d·ª•ng Connection 2 - THAY ƒê·ªîI TH√îNG TIN N√ÄY
    private static final String CONNECTION_URL =
        "jdbc:mysql://YOUR_HOST:YOUR_PORT/YOUR_DATABASE?ssl-mode=REQUIRED";
    
    public static void main(String[] args) {
        System.out.println("=== KH·ªûI T·∫†O DATABASE V√Ä D·ªÆ LI·ªÜU M·∫™U ===");
        DatabaseInitializer initializer = new DatabaseInitializer();
        
        // 1. Test k·∫øt n·ªëi
        if (initializer.testConnection()) {
            // 2. T·∫°o tables
            initializer.createTables();
            // 3. Th√™m d·ªØ li·ªáu m·∫´u
            initializer.insertSampleData();
            // 4. Verify d·ªØ li·ªáu
            initializer.verifyData();
        }
    }
    
    public boolean testConnection() {
        System.out.println("\n1. üîç KI·ªÇM TRA K·∫æT N·ªêI DATABASE");
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection(CONNECTION_URL, "sqluser", "password");
            
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT 1 as test, NOW() as server_time");
            
            if (rs.next()) {
                System.out.println("   ‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!");
                System.out.println("   ‚è∞ Server time: " + rs.getTimestamp("server_time"));
            }
            
            rs.close();
            stmt.close();
            conn.close();
            return true;
            
        } catch (Exception e) {
            System.out.println("   ‚ùå L·ªói k·∫øt n·ªëi: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    public void createTables() {
        System.out.println("\n2. üèóÔ∏è  T·∫†O C√ÅC B·∫¢NG DATABASE");
        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(CONNECTION_URL, "sqluser", "password");
            Statement stmt = conn.createStatement();

            // Check if tables exist and migrate if needed
            System.out.println("   üîç Ki·ªÉm tra v√† migrate database...");
            migrateAppointmentStatusIfNeeded(stmt);

            // Drop existing tables (ƒë·ªÉ t·∫°o l·∫°i t·ª´ ƒë·∫ßu) - commented out to preserve data
            // System.out.println("   üóëÔ∏è  X√≥a c√°c b·∫£ng c≈© (n·∫øu c√≥)...");
            // stmt.executeUpdate("DROP TABLE IF EXISTS medical_records");
            // stmt.executeUpdate("DROP TABLE IF EXISTS appointments");
            // stmt.executeUpdate("DROP TABLE IF EXISTS pets");
            // stmt.executeUpdate("DROP TABLE IF EXISTS owners");
            // stmt.executeUpdate("DROP TABLE IF EXISTS products");
            
            // 1. T·∫°o b·∫£ng owners (n·∫øu ch∆∞a c√≥)
            System.out.println("   üìã T·∫°o b·∫£ng owners...");
            String createOwnersTable = """
                CREATE TABLE IF NOT EXISTS owners (
                    owner_id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    email VARCHAR(100) UNIQUE,
                    phone VARCHAR(20),
                    address TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """;
            stmt.executeUpdate(createOwnersTable);
            
            // 2. T·∫°o b·∫£ng pets (n·∫øu ch∆∞a c√≥)
            System.out.println("   üêæ T·∫°o b·∫£ng pets...");
            String createPetsTable = """
                CREATE TABLE IF NOT EXISTS pets (
                    pet_id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    species VARCHAR(50) NOT NULL,
                    breed VARCHAR(100),
                    age INT,
                    weight DECIMAL(5,2),
                    color VARCHAR(50),
                    gender ENUM('Male', 'Female', 'Unknown') DEFAULT 'Unknown',
                    owner_id INT,
                    health_status VARCHAR(100) DEFAULT 'Healthy',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (owner_id) REFERENCES owners(owner_id) ON DELETE CASCADE
                )
                """;
            stmt.executeUpdate(createPetsTable);
            
            // 3. T·∫°o b·∫£ng appointments (n·∫øu ch∆∞a c√≥)
            System.out.println("   üìÖ T·∫°o b·∫£ng appointments...");
            String createAppointmentsTable = """
                CREATE TABLE IF NOT EXISTS appointments (
                    appointment_id INT AUTO_INCREMENT PRIMARY KEY,
                    pet_id INT NOT NULL,
                    appointment_date DATETIME NOT NULL,
                    service_type VARCHAR(100) NOT NULL,
                    description TEXT,
                    status ENUM('Scheduled', 'Confirmed', 'In Progress', 'Completed', 'Cancelled', 'No Show') DEFAULT 'Scheduled',
                    cost DECIMAL(10,2),
                    veterinarian VARCHAR(100),
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (pet_id) REFERENCES pets(pet_id) ON DELETE CASCADE
                )
                """;
            stmt.executeUpdate(createAppointmentsTable);
            
            // 4. T·∫°o b·∫£ng medical_records
            System.out.println("   üè• T·∫°o b·∫£ng medical_records...");
            String createMedicalRecordsTable = """
                CREATE TABLE medical_records (
                    record_id INT AUTO_INCREMENT PRIMARY KEY,
                    pet_id INT NOT NULL,
                    visit_date DATE NOT NULL,
                    diagnosis TEXT,
                    treatment TEXT,
                    medications TEXT,
                    veterinarian VARCHAR(100),
                    follow_up_date DATE,
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (pet_id) REFERENCES pets(pet_id) ON DELETE CASCADE
                )
                """;
            stmt.executeUpdate(createMedicalRecordsTable);
            
            // 5. T·∫°o b·∫£ng products
            System.out.println("   üõçÔ∏è  T·∫°o b·∫£ng products...");
            String createProductsTable = """
                CREATE TABLE products (
                    product_id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(200) NOT NULL,
                    category VARCHAR(100),
                    description TEXT,
                    price DECIMAL(10,2) NOT NULL,
                    stock_quantity INT DEFAULT 0,
                    supplier VARCHAR(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """;
            stmt.executeUpdate(createProductsTable);
            
            stmt.close();
            conn.close();
            System.out.println("   ‚úÖ T·∫•t c·∫£ b·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
            
        } catch (Exception e) {
            System.out.println("   ‚ùå L·ªói khi t·∫°o b·∫£ng: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    public void insertSampleData() {
        System.out.println("\n3. üìä TH√äM D·ªÆ LI·ªÜU M·∫™U");
        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(CONNECTION_URL, "sqluser", "password");
            
            // 1. Th√™m owners
            System.out.println("   üë• Th√™m d·ªØ li·ªáu owners...");
            String insertOwners = """
                INSERT INTO owners (name, email, phone, address) VALUES
                ('Nguy·ªÖn VƒÉn A', 'nguyenvana@email.com', '0123-456-789', '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM'),
                ('Tr·∫ßn Th·ªã B', 'tranthib@email.com', '0987-654-321', '456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2, TP.HCM'),
                ('L√™ VƒÉn C', 'levanc@email.com', '0369-258-147', '789 ƒê∆∞·ªùng DEF, Qu·∫≠n 3, TP.HCM'),
                ('Ph·∫°m Th·ªã D', 'phamthid@email.com', '0147-258-369', '321 ƒê∆∞·ªùng GHI, Qu·∫≠n 4, TP.HCM'),
                ('Ho√†ng VƒÉn E', 'hoangvane@email.com', '0258-147-369', '654 ƒê∆∞·ªùng JKL, Qu·∫≠n 5, TP.HCM')
                """;
            PreparedStatement pstmt = conn.prepareStatement(insertOwners);
            pstmt.executeUpdate();
            pstmt.close();
            
            // 2. Th√™m pets
            System.out.println("   üêæ Th√™m d·ªØ li·ªáu pets...");
            String insertPets = """
                INSERT INTO pets (name, species, breed, age, weight, color, gender, owner_id, health_status) VALUES
                ('Buddy', 'Dog', 'Golden Retriever', 3, 25.5, 'Golden', 'Male', 1, 'Healthy'),
                ('Mimi', 'Cat', 'Persian', 2, 4.2, 'White', 'Female', 2, 'Healthy'),
                ('Charlie', 'Dog', 'Poodle', 5, 8.7, 'Brown', 'Male', 3, 'Needs Checkup'),
                ('Luna', 'Cat', 'Siamese', 1, 3.1, 'Cream', 'Female', 4, 'Healthy'),
                ('Max', 'Dog', 'German Shepherd', 4, 30.2, 'Black', 'Male', 5, 'Healthy'),
                ('Bella', 'Cat', 'Maine Coon', 3, 5.8, 'Gray', 'Female', 1, 'Healthy'),
                ('Rocky', 'Dog', 'Bulldog', 6, 22.3, 'Brindle', 'Male', 2, 'Overweight')
                """;
            pstmt = conn.prepareStatement(insertPets);
            pstmt.executeUpdate();
            pstmt.close();
            
            System.out.println("   ‚úÖ D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
            conn.close();
            
        } catch (Exception e) {
            System.out.println("   ‚ùå L·ªói khi th√™m d·ªØ li·ªáu: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    public void verifyData() {
        System.out.println("\n4. ‚úÖ KI·ªÇM TRA D·ªÆ LI·ªÜU");
        Connection conn = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(CONNECTION_URL, "sqluser", "password");
            Statement stmt = conn.createStatement();
            
            // ƒê·∫øm s·ªë l∆∞·ª£ng records
            ResultSet rs = stmt.executeQuery("SELECT COUNT(*) as count FROM owners");
            rs.next();
            System.out.println("   üë• Owners: " + rs.getInt("count") + " records");
            
            rs = stmt.executeQuery("SELECT COUNT(*) as count FROM pets");
            rs.next();
            System.out.println("   üêæ Pets: " + rs.getInt("count") + " records");
            
            // Hi·ªÉn th·ªã m·ªôt s·ªë d·ªØ li·ªáu m·∫´u
            System.out.println("\n   üìã D·ªØ li·ªáu m·∫´u pets:");
            rs = stmt.executeQuery("""
                SELECT p.name, p.species, p.breed, o.name as owner_name 
                FROM pets p 
                JOIN owners o ON p.owner_id = o.owner_id 
                LIMIT 3
                """);
            
            while (rs.next()) {
                System.out.println("     ‚Ä¢ " + rs.getString("name") + 
                                 " (" + rs.getString("species") + " - " + rs.getString("breed") + 
                                 ") - Ch·ªß: " + rs.getString("owner_name"));
            }
            
            rs.close();
            stmt.close();
            conn.close();
            
            System.out.println("\nüéâ KH·ªûI T·∫†O DATABASE HO√ÄN TH√ÄNH!");
            
        } catch (Exception e) {
            System.out.println("   ‚ùå L·ªói khi ki·ªÉm tra d·ªØ li·ªáu: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void migrateAppointmentStatusIfNeeded(Statement stmt) {
        try {
            System.out.println("   üîÑ Ki·ªÉm tra migration cho appointment status...");

            // Check if appointments table exists
            var rs = stmt.executeQuery("SHOW TABLES LIKE 'appointments'");
            if (!rs.next()) {
                System.out.println("   ‚ÑπÔ∏è  B·∫£ng appointments ch∆∞a t·ªìn t·∫°i, s·∫Ω t·∫°o m·ªõi");
                rs.close();
                return;
            }
            rs.close();

            // Check current ENUM values
            var descRs = stmt.executeQuery("DESCRIBE appointments");
            String currentEnumDef = "";
            while (descRs.next()) {
                if ("status".equals(descRs.getString("Field"))) {
                    currentEnumDef = descRs.getString("Type");
                    break;
                }
            }
            descRs.close();

            System.out.println("   üìã Current status definition: " + currentEnumDef);

            // Check if we need to migrate
            if (!currentEnumDef.contains("In Progress") || !currentEnumDef.contains("No Show") || !currentEnumDef.contains("Confirmed")) {
                System.out.println("   üîß Migrating status column to include new values...");

                try {
                    // Try direct ALTER first
                    String alterStatusEnum = """
                        ALTER TABLE appointments
                        MODIFY COLUMN status ENUM('Scheduled', 'Confirmed', 'In Progress', 'Completed', 'Cancelled', 'No Show')
                        DEFAULT 'Scheduled'
                        """;
                    stmt.executeUpdate(alterStatusEnum);
                    System.out.println("   ‚úÖ Status column migration completed!");

                } catch (Exception e) {
                    System.out.println("   ‚ö†Ô∏è  Direct ALTER failed, trying alternative approach...");

                    // Alternative approach: add temp column, copy data, replace
                    stmt.executeUpdate("ALTER TABLE appointments ADD COLUMN status_temp ENUM('Scheduled', 'Confirmed', 'In Progress', 'Completed', 'Cancelled', 'No Show') DEFAULT 'Scheduled'");
                    stmt.executeUpdate("UPDATE appointments SET status_temp = status");
                    stmt.executeUpdate("ALTER TABLE appointments DROP COLUMN status");
                    stmt.executeUpdate("ALTER TABLE appointments CHANGE COLUMN status_temp status ENUM('Scheduled', 'Confirmed', 'In Progress', 'Completed', 'Cancelled', 'No Show') DEFAULT 'Scheduled'");
                    System.out.println("   ‚úÖ Alternative migration completed!");
                }
            } else {
                System.out.println("   ‚úÖ Status column already up to date");
            }

        } catch (Exception e) {
            System.out.println("   ‚ö†Ô∏è  Migration check failed: " + e.getMessage());
            // Continue anyway - table creation will handle it
        }
    }
}
